AWSTemplateFormatVersion: 2010-09-09

Description: >
  This Cloudformation Template creates a Compose enabled Docker machine on EC2 Instance. 
  Docker Machine is configured to work with AWS ECR using IAM role, and also
  upgraded to AWS CLI Version 2 to enable ECR commands.
  Docker Machine will run on Amazon Linux 2 EC2 Instance with
  custom security group allowing HTTP(80) and SSH (22) connections from anywhere.

Parameters:
  KeyPairName:
    Description: Enter the name of your Key Pair for SSH connections.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must one of the existing EC2 KeyPair
Resources:
  InstanceConnectPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument: #required
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ec2-instance-connect:SendSSHPublicKey
            Resource:
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
            Condition: {"StringEquals": {"ec2:osuser": ["ec2-user", "ubuntu"]}}
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
            Resource: "*"
  EC2InstanceConnect:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref InstanceConnectPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
        - arn:aws:iam::aws:policy/AdministratorAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
  EC2ConnectProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles: #required
        - !Ref EC2InstanceConnect

  DockerMachineSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH for Docker Machine
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2377
          ToPort: 2377
          CidrIp: 0.0.0.0/0  
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  DockerMachineSecurityGroupIngress7946tcp:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref DockerMachineSecurityGroup
      IpProtocol: tcp #required
      FromPort: 7946
      ToPort: 7946
      SourceSecurityGroupId: !GetAtt DockerMachineSecurityGroup.GroupId
  
  DockerMachineSecurityGroupIngress7946udp:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref DockerMachineSecurityGroup
      IpProtocol: udp #required
      FromPort: 7946
      ToPort: 7946
      SourceSecurityGroupId: !GetAtt DockerMachineSecurityGroup.GroupId          
  
  DockerMachineSecurityGroupIngress4789udp:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref DockerMachineSecurityGroup
      IpProtocol: udp #required
      FromPort: 4789
      ToPort: 4789
      SourceSecurityGroupId: !GetAtt DockerMachineSecurityGroup.GroupId          
      

  DockerMachineControlNode:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-02354e95b39ca8dec
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2ConnectProfile
      SecurityGroupIds:
        - !GetAtt DockerMachineSecurityGroup.GroupId
      Tags:                
        -                        
          Key: Name
          Value: !Sub Docker Machine of ${AWS::StackName}
           
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash
              yum update -y
              amazon-linux-extras install docker -y
              systemctl start docker
              systemctl enable docker
              usermod -a -G docker ec2-user
              curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
              -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install
              mkdir app
              cd app
              wget https://raw.githubusercontent.com/yurttav/prj202/main/docker-compose.yml
              aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 547186126689.dkr.ecr.us-east-1.amazonaws
              docker swarm init --advertise-addr ${ControlNodePrivateIP}
              docker stack deploy -c docker-compose.yml phonebook
            - ControlNodePrivateIP: !GetAtt DockerMachineSecurityGroup.GroupId

Outputs:
  WebsiteURL:
    Description: Docker Machine Control Node DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt DockerMachineControlNode.PublicDnsName
